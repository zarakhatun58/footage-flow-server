// utils/transcriptMock.js
import fs from 'fs';
import path from 'path';
import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();

export const transcribeAudio = async (filePath) => {
  try {
    const fileName = path.basename(filePath);
    const prompt = `The file "${fileName}" is a video. Simulate a transcript of what a speaker might be saying in an educational or tutorial video. Provide a short, realistic transcript.`;

    const response = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'meta-llama/llama-4-scout-17b-16e-instruct',
        messages: [
          {
            role: 'system',
            content: 'You are an AI assistant that generates fake but realistic transcripts from video filenames.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const transcript = response.data.choices?.[0]?.message?.content?.trim();

    if (!transcript) {
      console.error('‚ùå No transcript generated by Groq.');
      return null;
    }

    console.log('üß† Transcript generated using Groq API');

    // Now generate emotion and story from transcript
    const emotionPrompt = `
      Based on the transcript below, extract the dominant emotion and convert it into a short narrative.
      Transcript: """${transcript}"""
      Respond in strict JSON format: { "emotion": "...", "story": "..." }
    `;

    const emotionResponse = await axios.post(
      'https://api.groq.com/openai/v1/chat/completions',
      {
        model: 'mixtral-8x7b-32768',
        messages: [{ role: 'user', content: emotionPrompt }],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
          'Content-Type': 'application/json',
        },
      }
    );

    const result = JSON.parse(emotionResponse.data.choices?.[0]?.message?.content || '{}');

    return {
      transcript,
      emotion: result.emotion || 'neutral',
      story: result.story || '',
    };
  } catch (error) {
    console.error('‚ùå Error using Groq API:', error.message || error);
    return null;
  }
};
